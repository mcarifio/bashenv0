T 1588602197 18<toad_polo18>	I'm going to respond to the "support setup.py install" one when I get a chance.
T 1588615882 18<pradyunsg18>	EWDurbin, @di: question regarding PEP 541 ‚Äî for a project to be deemed "abandoned", would it be OK to start the emails/communications for determining "reachability", before "no releases for 1 year" requirement is satisfied?
T 1588615996 18<EWDurbin18>	pradyunsg generally if the request is valid and makes sense we'd start that as soon as someone has time to look at the request.
T 1588616194 18<pradyunsg18>	Okai. :)
T 1588626656 18<toad_polo18>	pradyunsg: Did you also ever make a generic builder tool?
T 1588626694 18<pradyunsg18>	toad_polo: nope. have not been able to find the time for it. :(
T 1588626709 18<toad_polo18>	I can imagine.
T 1588641865 18<sluidfoe18>	hi, would this be the place to ask about files.pythonhosted.org returning empty responses for "friendly" package names?
T 1588641884 18<sluidfoe18>	e.g. `https://files.pythonhosted.org/packages/source/n/ntc-templates/ntc-templates-1.4.1.tar.gz`
T 1588643420 18<sluidfoe18>	nevermind, apparently hyphens are only allowed for separating the name from the version in the filename
T 1588681929 18<toad_polo18>	Do you have to be an admin to get a scoped API token for repositories you're a maintainer on?
T 1588681978 18<toad_polo18>	It seems to be under "Manage", which is not available unless you are also administrator I think.
T 1588686856 18<toad_polo18>	Oh, wait, you can get at the repo tokens from your account settings.
T 1588738810 20*	Disconnected (20Connection timed out)
T 1588738836 19*	Now talking on 22#pypa
T 1588738836 22*	Topic for 22#pypa is: The channel for users of PyPA tools (pip, virtualenv, setuptools, etc) | Packaging User Guide: https://packaging.python.org | pypi.org status https://status.python.org/ | New PyPI launched 2018-04-16 https://wiki.python.org/psf/WarehouseRoadmap | Development discussion happens in #pypa-dev | Use !logs for a link to channel logs. /msg pmxbot !help for commands
T 1588738836 22*	Topic for 22#pypa set by 26sumanah!~sumanah@mediawiki/sumanah (24Mon Apr 16 11:21:29 2018)
T 1588738837 -18pmxbot-	PRIVACY INFORMATION: LOGGING IS ENABLED!!
T 1588738837 -18pmxbot-	The following channels are being logged to provide a
T 1588738837 -18pmxbot-	convenient, searchable archive of conversation histories:
T 1588738837 -18pmxbot-	#buildout, #dcpython, #mongodb, #pil, #pythonpackages, #velociraptor, #pypa, #pypa-dev, #aboutcode
T 1588849105 18<toad_polo18>	pradyunsg: Looks like the cache proposal is dead in the water.
T 1588849196 18<toad_polo18>	So I guess we're stuck with build/ indefinitely. Alas.
T 1588849737 18<pradyunsg18>	Gah.
T 1588849774 18<pradyunsg18>	Thanks toad_polo for the heads up. I wasn't keeping up with that thread, so this is certainly news to me.
T 1589052531 20*	Disconnected (20Connection timed out)
T 1589052558 19*	Now talking on 22#pypa
T 1589052558 22*	Topic for 22#pypa is: The channel for users of PyPA tools (pip, virtualenv, setuptools, etc) | Packaging User Guide: https://packaging.python.org | pypi.org status https://status.python.org/ | New PyPI launched 2018-04-16 https://wiki.python.org/psf/WarehouseRoadmap | Development discussion happens in #pypa-dev | Use !logs for a link to channel logs. /msg pmxbot !help for commands
T 1589052558 22*	Topic for 22#pypa set by 26sumanah!~sumanah@mediawiki/sumanah (24Mon Apr 16 11:21:29 2018)
T 1589052559 -18pmxbot-	PRIVACY INFORMATION: LOGGING IS ENABLED!!
T 1589052559 -18pmxbot-	The following channels are being logged to provide a
T 1589052559 -18pmxbot-	convenient, searchable archive of conversation histories:
T 1589052559 -18pmxbot-	#buildout, #dcpython, #mongodb, #pil, #pythonpackages, #velociraptor, #pypa, #pypa-dev, #aboutcode
T 1589072517 18<abadger199918>	pradyunsg: Hey, I am on IRC if you (or anyone else) feels the need to talk about 8214.  I'm really busy at work so I might not get to code much on extras during the week but I can usually talk and a bit of non-work weekend coding is always nice.
T 1589073008 18<pradyunsg18>	abadger1999: I'll be able to take a more proper look (instead of the about 10 minutes I spent earlier today) in ~12-15 hours. Would you be around at that time?
T 1589073076 18<abadger199918>	pradyunsg: I'm in the US, West coast.  I should be around at the tail end of that range.
T 1589073089 18<abadger199918>	I might be awake at the start of it but I can't promise ;-)
T 1589073140 18<abadger199918>	And no expectatons on my part.  I just wanted to let you know that I'm available to discuss if you want to.
T 1589127995 18<toad_polo18>	pradyunsg and possibly sumanah: any interest in a meeting with some Arch Linux distro maintainers about a way forward on build tools?
T 1589128007 18<toad_polo18>	They seem very upset about being told that `pip` is the supported way forward.
T 1589128093 18<toad_polo18>	Might be good to get Debian or someone else on board. I think they'd be happy if the modular, minimal-required-dependency wheel builder and wheel installer tools existed, which definitely dovetails with my interest in a Unix philosophy ecosystem.
T 1589129038 18<pradyunsg18>	toad_polo: yup yup. I'm definitely interested in talking to both distros, and trying to understand what the gaps in our current toolchain are for them.
T 1589129147 18<pradyunsg18>	I'm not sure what specific approach we'd end up taking, but understanding their use case better is definitely a good step towards improving things.
T 1589129736 18<pradyunsg18>	Although, the meetings with each distro should be separate, both to keep the number of people lower as well as allow for more specific discussions. :)
T 1589129841 18<toad_polo18>	I was hoping to play matchmaker and convince them to build a canonical minimal builder and minimal wheel installer.
T 1589133761 18<pradyunsg18>	That works too. LOL
T 1589235319 18<sudocurse18>	hey i know this isn't a pyenv channel but does anyone know why pyenv's install steps say to add $PYENV_ROOT/bin to path when that directory doesn't exist?
T 1589235423 18<sudocurse18>	(it instructs you to set PYENV_ROOT to ~/.pyenv)
T 1589235458 18<dude-x18>	sudocurse did you check the directory with ls -a?
T 1589235483 18<sudocurse18>	yeah, the directories pyenv creates are shims versions
T 1589235509 18<dude-x18>	you don't have to do anything pyenv suggests.
T 1589235512 18<sudocurse18>	lol
T 1589235516 18<sudocurse18>	the bin directory only exists in the individual version directories
T 1589235521 18<sudocurse18>	seems uh
T 1589235521 18<sudocurse18>	wrong
T 1589235540 18<dude-x18>	pyenv has copies of python versions
T 1589235545 18<dude-x18>	i think shims is just a symlink
T 1589235553 18<sudocurse18>	yeah
T 1589235683 18<dstufft18>	sudocurse: did you run pyenv rehash
T 1589235729 18<dstufft18>	shims are not just symlinks, they're bash scripts to support shit like PYTHON_VERSION
T 1589235747 18<sudocurse18>	oh that helped, i was looking into this because my /usr/local/bin symlinks are messed up
T 1589235769 18<sudocurse18>	thanks
T 1589235792 18<sudocurse18>	still confused about why /Users/ankeet/.pyenv/bin is in my path
T 1589235803 18<sudocurse18>	maybe someone just forgot to take it out of the readme
T 1589235812 18<sudocurse18>	s/someone/everyone
T 1589257976 18<TomDotTom18>	!logs
T 1589257977 18<pmxbot18>	http://kafka.dcpython.org/channel/pypa
T 1589281175 18<ixje18>	hi, is there an option to add a custom install flag that I can use to ignore a specific install_requirement item? Some context; I have a project that supports multiple databases and I'd like the option to prevent installing wrappers for databases they do not want (as some wrappers fail to build without the underlying header files). For `setup.py`
T 1589281175 18<ixje18>	I've added a `--without-leveldb` flag via install/develop commands which removes the `plyvel` (leveldb wrapper) package from the requirements list. The problem I'm seeing is that `pip` gathers the `install_requires` before the custom `setup.py` commands are executed thus installing requirements I do not want.
T 1589284467 18<ngoldbaum18>	ixje: you probably want extras ans extras_require
T 1589284531 18<ngoldbaum18>	that‚Äôs not quite the same as what you‚Äôre asking for but i think you can set things up to get what you want
T 1589284918 18<ixje18>	ngoldbaum: thanks! For this use-case it actually makes even more sense as well :-)
T 1589288580 18<kuwv18>	Hello, I have couple of questions I've been wondering for a while.
T 1589288609 18<kuwv18>	What is a partial install called example: pip install --user "molecule[lint]"
T 1589288647 18<kuwv18>	And how can my project be setup to implement this myself?
T 1589289040 18<ngoldbaum18>	the [lint] bit is called an ‚Äúextra‚Äù
T 1589289053 18<ngoldbaum18>	you can define them vis extras_require
T 1589289065 18*	ngoldbaum is a broken record this morning
T 1589289083 18<ngoldbaum18>	(someone else asked about this before you joined kuwv)
T 1589290601 18<kuwv18>	oh, I see.
T 1589290651 18<kuwv18>	Let me see if I can find any reading material on this.
T 1589311569 18<kodiak_f18>	any chance anyone is running a bandersnatch mirror behind Apache2 on Ubuntu/Debian?  I think I'm really close but pointing a pip client at it as an index ends in tracebacks
T 1589311694 18<kodiak_f18>	for whatever reason curl'ing the pypi mirror's /simple/ dir results in a 301 to... ...itself - I think  that might be part of it.  But I don't have any rewrite rules
T 1589311865 18<cooperlees18>	kodiak_f: Should work. You using hash-index = true in your config or not?
T 1589311892 18<cooperlees18>	Can you pastebin pip tracebacks too - That will tell me what it's upset about :)
T 1589311921 18<kodiak_f18>	I shied away from using hash-indexes based on a 2 second read of the doc, which I might have gotten wrong and sure one sec while I p-bin
T 1589312033 18<kodiak_f18>	https://paste.centos.org/view/be9e5e76
T 1589312041 18<kodiak_f18>	thanks @cooperless
T 1589312052 18<kodiak_f18>	er, @cooperlees (sorry)
T 1589312166 18<cooperlees18>	pip -vvv --no-cache-dir search testrun
T 1589312166 18<cooperlees18>	Search can't hit a bandersnatch mirror
T 1589312181 18<cooperlees18>	It talks to a dynamic XML RPC endpoint
T 1589312221 18<cooperlees18>	bandersnatch only mirror's the static side of the mirror. /simple + the binary sdists and wheels of the packages
T 1589312230 18<cooperlees18>	+ JSON metadata if you enable it
T 1589312251 18<cooperlees18>	But you will need your Apache to set the JSON mime type on those directories to make a lot of callers happy :)
T 1589312280 18<kodiak_f18>	ah - sorry - I'm a bit out of my element.  I'm a dreadful coder so I'm not too up w/ Pip's inner workings.  I'm just another ops janitor supporting people who needed a mirror ha.
T 1589312288 18<kodiak_f18>	Good stuff - I appreciate it!
T 1589312397 18<cooperlees18>	kodiak_f: No worries - I maintain bandersnatch and I guess am a sys adminy type as well
T 1589312400 18<kodiak_f18>	thanks again @cooperlees - I tried an install and that's much more promising.  It's dying on missing requirements, which I can understand
T 1589312402 18<kodiak_f18>	https://paste.centos.org/view/ad218a8e
T 1589312405 18<cooperlees18>	if you have more questions fire away
T 1589312418 18<kodiak_f18>	So now I have to figure out a model for pulling in requirements automagically if possible
T 1589312435 18<cooperlees18>	Try an install of appdirs or click
T 1589312442 18<kodiak_f18>	I'm kind of hoping to maintain an extensive whitelist as an ansible block_in_file
T 1589312459 18<cooperlees18>	ahhh ok - yeah pypi is huge now
T 1589312465 18<kodiak_f18>	6TB!
T 1589312481 18<cooperlees18>	Look at poetry or some resolver to help find recursive dependencies
T 1589312497 18<kodiak_f18>	not only that but this is going to be the beginnings of an internal mirror that comes from the stance of:  "We don't trust what's on pypi - only bring in vetted materials"
T 1589312501 18<cooperlees18>	https://python-poetry.org
T 1589312555 18<kodiak_f18>	awesome - thanks so much for the tips - every time I talk to pythonistas it makes me wish I wasn't such a crap coder - Python is really fun for what little I can do of it
T 1589312949 18<cooperlees18>	Just start automating more things with it and you‚Äôll be useful in no time
T 1589312978 18<kodiak_f18>	I'm 8 years deep into Puppet but recently moved to an Ansible shop so the lang is closer at least
T 1589313256 18<kodiak_f18>	here's one for bandersnatch - say I use pip3 to install bandersnatch and mirror a test package - testrun - it pulls down the python3.6+ version of testrun.  Python2 clients can't use this version - is bandersnatch going to pull down every version of a package that is available, or just the python major version that bandersnatch is running?
T 1589313628 18<cooperlees18>	kodiak_f: All the versions unless you use plugins to filer
T 1589313635 18<cooperlees18>	*filter
T 1589313651 18<cooperlees18>	whitelist by default will pull down all tho
T 1589313717 18<kodiak_f18>	fantastic - thanks cooperlees
T 1589376485 18<kodiak_f18>	cooperlees - this makes sense in hindsight but is a bummer.  I'll have to go back to the drawing board for tracking deps.
T 1589376486 18<kodiak_f18>	https://paste.centos.org/view/fea7ad46
T 1589460970 19*	Now talking on 22#pypa
T 1589460970 22*	Topic for 22#pypa is: The channel for users of PyPA tools (pip, virtualenv, setuptools, etc) | Packaging User Guide: https://packaging.python.org | pypi.org status https://status.python.org/ | New PyPI launched 2018-04-16 https://wiki.python.org/psf/WarehouseRoadmap | Development discussion happens in #pypa-dev | Use !logs for a link to channel logs. /msg pmxbot !help for commands
T 1589460970 22*	Topic for 22#pypa set by 26sumanah!~sumanah@mediawiki/sumanah (24Mon Apr 16 11:21:29 2018)
T 1589460970 -18pmxbot-	PRIVACY INFORMATION: LOGGING IS ENABLED!!
T 1589460970 -18pmxbot-	The following channels are being logged to provide a
T 1589460970 -18pmxbot-	convenient, searchable archive of conversation histories:
T 1589460970 -18pmxbot-	#buildout, #dcpython, #mongodb, #pil, #pythonpackages, #velociraptor, #pypa, #pypa-dev, #aboutcode
T 1589481018 18<itamarst18>	hello
T 1589481030 18<itamarst18>	I am wondering if it's possible to do equivalent of `pip list` without actually using any python code
T 1589481045 18<itamarst18>	is listing .dist-info directories in `site-packages` and parsing out name + version sufficient?
T 1589481411 18<szborows18>	anyone knows what I can do if I forgot email address I used to register on pypi.org? I know it sounds ridiculous, but I registered an account 4 years ago and back then I might have had some other email address that is now abandoned.
T 1589482927 18<ngoldbaum18>	szborows: there‚Äôs a process to recover an account, do you still have push access to the development repository for packages associated with your account?
T 1589482942 18<ngoldbaum18>	assuming the repo is public
T 1589482950 18<ngoldbaum18>	if so you can prove you are you that way
T 1589482958 18<ngoldbaum18>	there may be other ways
T 1589482975 18<ngoldbaum18>	the process is to file an issue against pypa/warehouse on github
T 1589483321 18<szborows18>	ok, thanks
T 1589801114 19*	Now talking on 22#pypa
T 1589801114 22*	Topic for 22#pypa is: The channel for users of PyPA tools (pip, virtualenv, setuptools, etc) | Packaging User Guide: https://packaging.python.org | pypi.org status https://status.python.org/ | New PyPI launched 2018-04-16 https://wiki.python.org/psf/WarehouseRoadmap | Development discussion happens in #pypa-dev | Use !logs for a link to channel logs. /msg pmxbot !help for commands
T 1589801114 22*	Topic for 22#pypa set by 26sumanah!~sumanah@mediawiki/sumanah (24Mon Apr 16 11:21:29 2018)
T 1589801114 -18pmxbot-	PRIVACY INFORMATION: LOGGING IS ENABLED!!
T 1589801114 -18pmxbot-	The following channels are being logged to provide a
T 1589801114 -18pmxbot-	convenient, searchable archive of conversation histories:
T 1589801114 -18pmxbot-	#buildout, #dcpython, #mongodb, #pil, #pythonpackages, #velociraptor, #pypa, #pypa-dev, #aboutcode
T 1589803316 18<ngoldbaum18>	huh? what wheel?
T 1589803330 18<ngoldbaum18>	of the project you‚Äôre installing or one of its dependencies?
T 1589803363 18<ngoldbaum18>	-e means that the project you are installing can‚Äôt be installed as a wheel, otherwise it wouldn‚Äôt be editable
T 1589803365 18<taven18>	ngoldbaum: yeah on reinstalls of any package pip tries to rebuild a wheel for said package for some reason
T 1589803382 18<ngoldbaum18>	what package?
T 1589803390 18<ngoldbaum18>	more concrete details pls
T 1589803453 18<taven18>	ngoldbaum: here's an example https://hasteb.in/juwujonu.bash
T 1589803493 18<ngoldbaum18>	the complaints about six?
T 1589803518 18<taven18>	no it's about wheel not being installed despite being specified as a build requirement in pyproject.toml file
T 1589803533 18<taven18>	pip needs wheel to suppress those warnings
T 1589803553 18<ngoldbaum18>	ahhh i see
T 1589803557 18<ngoldbaum18>	not sure, sorry
T 1589803561 18<taven18>	six is just an example requirement i put in my setup.cfg file
T 1589803582 18<taven18>	oh well...seems like no one has answers :(
T 1589803591 18<taven18>	i was redirected here from python discord server
T 1589803597 18<ngoldbaum18>	i mean it‚Äôs pretty early on a monday
T 1589803605 18<ngoldbaum18>	in the US
T 1589803626 18<taven18>	i see lol, sorry dude
T 1589803677 18<ngoldbaum18>	if you can make a self-contained toy project that demonstrates the issue and file an issue against pip‚Äôs github or ask on the psf discourse in theb packaging section you might get a better answer
T 1589803683 18<ngoldbaum18>	or wait in here for a while
T 1589803714 18<ngoldbaum18>	but the way you asked initially was extremely confusing so be sure to make sure you‚Äôre asking in as clear and concrete a manner as possible
T 1589803719 18<taven18>	yeah i'll try to make an mvce then as well, should be easy...
T 1589807295 18<taven18>	ngoldbaum: okay finally finished the MVCE for that error, it will be highlighted in pink when you click on "run" https://repl.it/@daegontaven/PEP518-MVCE-Wheels
T 1589807321 18<ngoldbaum18>	ok, i can‚Äôt really help you but good luck elsewhere
T 1589813060 18<McSinyx[m]18>	taven, I'm here just in case you want to have realtime discussion
T 1589813075 18<taven18>	McSinyx[m]: cool, i'll just type here then
T 1589813098 18<taven18>	McSinyx[m]: I hear `pip` is moving away from sdist inclusions in `site-packages` and tries to build wheels for every package or download one if it's already built and just includes it directly in python instead of the source files. Not sure I remember the source however.
T 1589813133 18<taven18>	Editable installs may not be built, but that doesn't mean it should be ignored. Anyways isn't it pip's job to know what packages are required for build systems.
T 1589813175 18<McSinyx[m]18>	I don't think i get what you mean, but I have a hunch that the sdist thing has something to do with https://github.com/pypa/pip/issues/7555
T 1589813198 18<taven18>	why else would a build system config be made? wheel would be installed on site to build wheels...what's the point of isolation
T 1589813259 18<McSinyx[m]18>	build requirements afaik is to build the package and is only useful while we're building the wheel
T 1589813296 18<taven18>	i mean for instance if using poetry backend, pip would install poetry first if it's speciied in pyproject.toml right? or would poetry only work in isolation for building?
T 1589813429 18<McSinyx[m]18>	with build isolation poetry would only be installed within the isolated environment (I don't think it's possible to install from source using pip w/o isolated build for poetry though)
T 1589813460 18<McSinyx[m]18>	but after installation the user won't have additionally poetry installed
T 1589813504 18<taven18>	i see...why was that choice made? doesn't it make sense to have the build tool on site?
T 1589813554 18<McSinyx[m]18>	I think we'd need to read PEP 517 to find out (I've never read it really carefully)
T 1589813613 18<taven18>	well afaik pep 517 is not final anyways
T 1589813631 18<McSinyx[m]18>	https://www.python.org/dev/peps/pep-0517/#recommendations-for-build-frontends-non-normative
T 1589813651 18<McSinyx[m]18>	agreed, people have lots of conflicts of interests
T 1589813685 18<McSinyx[m]18>	i.e. for edge cases this kind of handling breaks another's (e.g. GH-7555 above)
T 1589813939 18<taven18>	I guess this decision was on purpose...dang it. Now I have to campaign to get rid of it :/
T 1589813971 18<McSinyx[m]18>	insert y tho meme
T 1589814021 18<taven18>	McSinyx[m]: thanks for the help marking as solved with the correct sources :)
T 1589814074 18<McSinyx[m]18>	there's new editable is coming (reading the discussion makes my head hurts tho, TMI: https://discuss.python.org/t/next-steps-for-editable-develop-proof-of-concept/4118)
T 1589814151 18<McSinyx[m]18>	glad I could help
T 1589814155 18<ngoldbaum18>	it‚Äôs pretty much impossible to stay up
T 1589814167 18<ngoldbaum18>	to date on this stuff without it becoming a fulltime job
T 1589814216 18<taven18>	yeah ...and little to no docs anywhere. I'm glad i'm not a package management dev lol
T 1589814225 18<McSinyx[m]18>	well afaik most maintainers do it on their free time
T 1589814252 18<taven18>	although i did flirt with the idea to make a package manager ...before pypa knocked some sense into me
T 1589814262 18<ngoldbaum18>	sure, they just expend as much effort as a full time job to stay up to date :p
T 1589814278 18<McSinyx[m]18>	not saying they don't dedicate other time pool into it tho
T 1589814328 18<McSinyx[m]18>	it's weird that afaik pypa doesn't actually have any stable fund for human resources
T 1589814375 18<McSinyx[m]18>	but that applies to most libre software projects, no matter how large it looks
T 1589814415 18<taven18>	i'm scared to use package managers in python now...used pipenv for a while (hated it)...poetry (broken) and non even pip is fucking with me ...jesus
T 1589814428 18<taven18>	s/non/now
T 1589814452 18<McSinyx[m]18>	hey pip works if you don't put your expectation too high on convenience
T 1589814474 18<taven18>	i know...i know :|
T 1589814481 18<McSinyx[m]18>	i gave up on editable on one of my project to made it easier to manage metadata
T 1589814537 18<McSinyx[m]18>	may add like 10s of latency every test run but it's not that bad
T 1589814541 18<taven18>	i would use poetry if it weren't for that fact they don't have optional deps
T 1589814571 18<McSinyx[m]18>	what's your use case to be specific?
T 1589814584 18<sumanah18>	if any of you work for companies that don't sponsor packaging, please do let them know about https://pyfound.blogspot.com/2020/04/sponsoring-python-packaging.html and point out the things that we've been able to make long-delayed progress on once we got a bit of money
T 1589814590 18<taven18>	i'm building a library for a simulation thingy
T 1589814610 18<sumanah18>	(popping in to mention that since it was mentioned that nearly all the packaging maintainers are working in their free time)
T 1589814637 18<McSinyx[m]18>	hi sumanah, hope you're still doing good
T 1589814641 18<taven18>	i'm mostly a broke college student :)
T 1589814660 18<sumanah18>	Thanks McSinyx[m] -- I'm ok physically, up & down mentally
T 1589814664 18<McSinyx[m]18>	taven, is it pure python or extension?
T 1589814672 18<sumanah18>	McSinyx[m]: hope you are well, thank you for inquiring
T 1589814676 18<taven18>	pure python yeah
T 1589814755 18<McSinyx[m]18>	thanks sumanah, I'm doing a lot better than last week (more used to the new schedule), sorry to hear about the down though
T 1589814842 18<McSinyx[m]18>	taven, then IMHO editable should works perfectly if you use setuptools as backend?
T 1589814877 18<taven18>	i am using setuptools, do you mean abaondoning pyproject.toml?
T 1589814895 18<taven18>	and just sticking to setuptools alone
T 1589814921 18<taven18>	i think i may go that route if it weren't for the case that setup_requires is deprecated
T 1589814937 18<McSinyx[m]18>	as stated in pep 518, it doesn't matter if you have the TOML file or not if you use setuptools
T 1589814958 18<McSinyx[m]18>	ooh yea unless you need more than setuptools and wheel as build backend
T 1589815002 18<taven18>	yeah i can't put wheel into setup_requires, and can't put it in install_requires since that is done mid build
T 1589815036 18<taven18>	i mean it's not a HUGE deal...just means i have to tell my users to remember to install wheel first
T 1589815061 18<McSinyx[m]18>	wheel is assumed: https://www.python.org/dev/peps/pep-0518/#build-system-table
T 1589815139 18<McSinyx[m]18>	> Because the use of setuptools and wheel are so expansive in the community at the moment, build tools are expected to use the example configuration file above as their default semantics when a pyproject.toml file is not present.
T 1589815149 18<taven18>	um...didn't they put that there specifically because people are idiots...some people do uninstall wheel
T 1589815159 18<taven18>	or maybe even install into system python
T 1589815177 18<McSinyx[m]18>	it does not matter if wheel presents in their sites
T 1589815200 18<McSinyx[m]18>	(we can't do anything about the system python tho lmao)
T 1589815258 18<taven18>	well it does not matter if one doesn't care about redundant warnings ..sure. Most of my packages don't tell people to install wheel anyways, since it's included in virtualenv
T 1589815271 18<McSinyx[m]18>	which warning?
T 1589815275 18<taven18>	so in a way i don't care either
T 1589815285 18<McSinyx[m]18>	ah the one posted on discourse, it's already fixed
T 1589815318 18<taven18>	the one in pink in my example about wheels && no it's not fixed, they changed the message to something else...that's not really a fix.
T 1589815322 18<McSinyx[m]18>	will be part of pip 20.1.1 when pradyunsg think it's ready
T 1589815347 18<taven18>	ur talking about this pr right? https://github.com/pypa/pip/pull/8180
T 1589815358 18<McSinyx[m]18>	I'm running on master as the  message is no longer there
T 1589815403 18<taven18>	interesting ...that means maybe there's a pr we dont' know that fixed it huh
T 1589815432 18<McSinyx[m]18>	the PR fixed it by moving the check down
T 1589815442 18<McSinyx[m]18>	you can git bisect just to be sure
T 1589815453 18<McSinyx[m]18>	btw what do you think about having a nightly pip?
T 1589815502 18<taven18>	that's not a bad idea, it's unlikely most will use it, but still a good idea..how would one update pip with nightly?
T 1589815526 18<McSinyx[m]18>	i use the pip to update the pip
T 1589815532 18<McSinyx[m]18>	> it's unlikely most will use it
T 1589815539 18<McSinyx[m]18>	that's what I'm afraid
T 1589815576 18<taven18>	yeah most won't use it since package maintainers don't like taking risks
T 1589815601 18<ngoldbaum18>	i mean you shouldn‚Äôt be using the system pip or python package anyway
T 1589815606 18<taven18>	and then there's the fact pip is not like any other package, people don't even update default pip
T 1589815608 18<ngoldbaum18>	(for exactly this reason)
T 1589815628 18<ngoldbaum18>	i wouldn‚Äôt update debian‚Äôs pip
T 1589815637 18<ngoldbaum18>	i‚Äôd happily update a pyenv-installed pip
T 1589815640 18<taven18>	no i mean the one you get in virtuenvs
T 1589815652 18<McSinyx[m]18>	I'd just have a user pip
T 1589815673 18<McSinyx[m]18>	the one provided by debian is just in case i accidentall delte the local site
T 1589815673 18<ngoldbaum18>	i‚Äôm pretty sure the first thing i do when i set up a virtualenv is update pip
T 1589815680 18<taven18>	i don't bother with --user...what's the point
T 1589815686 18<ngoldbaum18>	but then again that‚Äôs all mediated by tox
T 1589815719 18<McSinyx[m]18>	taven, in a venv it doesn't matter, outside, well I don't like typing my password
T 1589815737 18<taven18>	lol true dat
T 1589815761 18<ngoldbaum18>	just have a userland python install, problem solved :p
T 1589815762 18<McSinyx[m]18>	but yea a large pip usage is automated
T 1589815775 18<taven18>	userland?
T 1589815799 18<McSinyx[m]18>	probably ngoldbaum meant user-site
T 1589815816 18<ngoldbaum18>	one that lives in your home directory
T 1589815821 18<McSinyx[m]18>	I'm not that ambitious, and I don't need it ither
T 1589815823 18<ngoldbaum18>	e.g. pyenv
T 1589815833 18<taven18>	i don't like those either ...i like to isolate everything to venvs
T 1589815841 18<McSinyx[m]18>	userland iirc is the thing that's not within the kernel btw
T 1589815860 18<taven18>	yeah pyenv ftw
T 1589815930 18<McSinyx[m]18>	I'm heading out, nice to meet you both
T 1589815956 18<taven18>	aight i gotta go too...see ya
T 1589815964 18*	taven slinks back into the shadows
T 1589824211 18<rawplayer18>	 /win 1
T 1589825298 18<dude-x18>	weird. i got the wheel not found error when i tried to refresh my packages with a regular `pip install -r requirements.txt`
T 1589825311 18<dude-x18>	it seemed to go away with `pip install --force wheel`
T 1589825970 18<ngoldbaum18>	dude-x: ssl issues?
T 1589826001 18<dude-x18>	i've had ssl issues on rare occasion and they do show up as urllib errors
T 1589870213 18<pradyunsg18>	dude-x: what‚Äôs the error message?
T 1589885748 18<hrw18>	hello
T 1589886284 18<hrw18>	filled https://github.com/pypa/warehouse/issues/7980
T 1589886308 18<hrw18>	I hope that answer will be other then WONTFIX or KTHXBYE.
T 1589889351 18<ngoldbaum18>	i think that means py-spy would no longer work
T 1589889430 18<hrw18>	ngoldbaum: ?
T 1589889488 18<ngoldbaum18>	py-spy is written in rust so it lives on crates.io, still it has a python binary distributed as a wheel on pypi
T 1589889541 18<ngoldbaum18>	https://pypi.org/project/py-spy/#files
T 1589889574 18<ngoldbaum18>	also how would pypi verify the wheels come from the uploaded tarball?
T 1589889597 18<ngoldbaum18>	what‚Äôs stopping someone from uploading an empty tarball or something
T 1589889635 18*	mgedmin is now thinking about a pep518 compliant implementation that runs 'cargo build'
T 1589894005 18<dude-x18>	pradyunsg i don't remember exactly but it said for many packages: unable to install package 'blah' because module 'wheel' was not found.
T 1589894053 18<pradyunsg18>	Ah, try now with pip 20.1.1 -- when that message is printed and the contents of that message were improved.
T 1589894057 18<pradyunsg18>	dude-x: ^
T 1589894080 18<hrw18>	ngoldbaum: you can still push wheel. just push source
T 1589894096 18<dude-x18>	pradyunsg okay i'll try pip installing requirements again
T 1589894098 18<ngoldbaum18>	but there is no source
T 1589894102 18<ngoldbaum18>	that‚Äôs the thing
T 1589894125 18<hrw18>	ngoldbaum: do you publish aarch64 wheel? ppc64le wheel? riscv wheel/
T 1589894126 18<hrw18>	?
T 1589894153 18<ngoldbaum18>	what do i have to do with anything?
T 1589894168 18<ngoldbaum18>	the py-spy devs can publish whatever they want to publish
T 1589894170 18<hrw18>	I run aarch64 system and want to use your py-spy.
T 1589894186 18<hrw18>	but no aarch64 wheel, no source so can not
T 1589894188 18<ngoldbaum18>	ok, start with the rust sources
T 1589894196 18<hrw18>	and can not use all projects which use it
T 1589894209 18<ngoldbaum18>	i just
T 1589894220 18<hrw18>	ngoldbaum: make it work with 'pip install py-spy'? fail if no rustc etc
T 1589894243 18<ngoldbaum18>	just trying to point out that there are real-world usecases that your requirement would break
T 1589894259 18<ngoldbaum18>	go ahead and wait for someone from pypa to respond to your issue
T 1589894264 18<hrw18>	I may consider them invalid ;)
T 1589894279 18<hrw18>	but understand them too
T 1589894326 18<hrw18>	I had too many wasted days because someone pushed wheel only to pypi and broke all my CI jobs
T 1589894351 18<mgedmin18>	something something technical solutions for social problems
T 1589894353 18<hrw18>	so instead of doing my work I had to check why they failed, find which package, where to report bug etc
T 1589894370 18<ngoldbaum18>	seems like a bug in protobuf‚Äôs release process to me
T 1589894381 18<ngoldbaum18>	not really a pypi problem per se
T 1589894411 18<ngoldbaum18>	especially if the ‚Äúsolution‚Äù breaks a lot of other things that use the ability to only publish binaries for a project
T 1589894453 18<ngoldbaum18>	iirc tensorflow does something similar with their wheels
T 1589894461 18<ngoldbaum18>	all these google projects :p
T 1589894563 18<McSinyx[m]18>	we can, on the other hand, enforce projects on PyPI to be free/libre software though
T 1589894584 18<McSinyx[m]18>	AFAIK we don't have any rules about the licensing of packages uploaded to PyPI
T 1589894626 18<McSinyx[m]18>	if we ensure that they're libre software, the license will basically cover the reproducible source part
T 1589894634 18<ngoldbaum18>	i mean these are all free/libre projects
T 1589894642 18<ngoldbaum18>	the source is just available elsewhere
T 1589894645 18<ngoldbaum18>	not on pypi
T 1589894657 18<ngoldbaum18>	only using pypi for the binary distribution via pip
T 1589894677 18<McSinyx[m]18>	ah got it, so it's rather just inconvenient to automate?
T 1589894696 18<McSinyx[m]18>	*automate building from source
T 1589894697 18<ngoldbaum18>	for protobuf it seems like someone forgot to upload the sdist this time
T 1589894701 18<hrw18>	the prbolem starts when binaries do not cover platforms
T 1589894717 18<ngoldbaum18>	for the other‚Äôs it‚Äôs a conscious decision
T 1589894777 18<dude-x18>	pradyunsg i reran the install and saw no errors. so i guess force installing wheels works
T 1589894807 18<McSinyx[m]18>	in alternative to enfocing sdist (which is not necessarily buildable using e.g. pip), we can force them to link to source
T 1589894813 18<McSinyx[m]18>	but even that is up to debate
T 1589894988 18<McSinyx[m]18>	ngoldbaum: just looked up protobuf, i also think they did not considered uploading sdist
T 1589895030 18<hrw18>	McSinyx[m]: and did for each previous ones
T 1589895030 18<McSinyx[m]18>	dude-x: do you still need to force-wheel?
T 1589895045 18<hrw18>	McSinyx[m]: current version is not installable
T 1589895047 18<ngoldbaum18>	yeah, like i said, a bug in their release process, or they‚Äôve arbitrarily decided to stop now on a bugfix release
T 1589895056 18<dude-x18>	McSinyx[m] no it was just a one time thnig
T 1589895057 18<ngoldbaum18>	which would be strange
T 1589895181 18<McSinyx[m]18>	dude-x: I'm asking because I'm curious, don't really know why that happens, I'm sorry
T 1589895297 18<dude-x18>	McSinyx[m] ah. i activated an old venv in pyenv, wanted to make sure i updated my dependencies that may have changed in the repo. ran pip install -r requirements and got a ton of wheel not found errors.
T 1589896250 18<dude-x18>	ooh latest pip removes multiprocessing. it was pretty slow on my mac for non python 3.8 checks for outdated.
T 1589896348 18<McSinyx[m]18>	dude-x, see https://github.com/pypa/pip/issues/8169 and linked issues
T 1589896413 18<dude-x18>	McSinyx[m] do you need more than one core for multithreading to work properly for IO bound wokr?
T 1589896509 18<McSinyx[m]18>	I don't think so, but we're uncertain about edge cases like on android (no sem_open)
T 1589896523 18<ngoldbaum18>	no, especially for things waiting on the network
T 1589896531 18<dude-x18>	fair enough.
T 1589896535 18<dude-x18>	what does sem_open do?
T 1589896538 18<hrw18>	hm. multithreaded pip...
T 1589896544 18<dude-x18>	open a semaphore?
T 1589896551 18<McSinyx[m]18>	yes
T 1589896565 18<McSinyx[m]18>	multiprocessing uses it
T 1589896566 18<hrw18>	On-line CPU(s) list: 0-45
T 1589896574 18<dude-x18>	huh android doesn't provide semaphors? that's interesting.
T 1589896585 18<McSinyx[m]18>	(the thread pool used in pip list is from multiprocessing dummy)
T 1589896609 18<McSinyx[m]18>	dude-x: I'm not sure, I only know that sem_open is not supported
T 1589896624 18<McSinyx[m]18>	it's generally a new-ish thing (10y or so)
T 1589896666 18<McSinyx[m]18>	https://bugs.python.org/issue3770
T 1600044734 19*	Now talking on 22#pypa
T 1600044734 22*	Topic for 22#pypa is: The channel for users of PyPA tools (pip, virtualenv, setuptools, etc) | Packaging User Guide: https://packaging.python.org | pypi.org status https://status.python.org/ | New PyPI launched 2018-04-16 https://wiki.python.org/psf/WarehouseRoadmap | Development discussion happens in #pypa-dev | Use !logs for a link to channel logs. /msg pmxbot !help for commands
T 1600044734 22*	Topic for 22#pypa set by 26sumanah!~sumanah@mediawiki/sumanah (24Mon Apr 16 11:21:29 2018)
T 1600044735 -18pmxbot-	PRIVACY INFORMATION: LOGGING IS ENABLED!!
T 1600044735 -18pmxbot-	The following channels are being logged to provide a
T 1600044735 -18pmxbot-	convenient, searchable archive of conversation histories:
T 1600044735 -18pmxbot-	#buildout, #dcpython, #mongodb, #pil, #pythonpackages, #velociraptor, #pypa, #pypa-dev, #aboutcode
T 1600071703 18<McSinyx[m]18>	not entirely related, should we consider merging #pypa and #pypa-dev
T 1600071761 18<McSinyx[m]18>	the two are quite low traffic and very often development ideas are discussed in #pypa and support questions are asked in #pypa-dev (I'm also guilty of this)
T 1600076019 18<abn18>	Regarding the warehouse RSS feeds and yanked packages: Does any of the feeds publish an item if a released file is yanked?
T 1600077589 18<abn18>	Hmm, answering my own question. No. It is not really published in any of the feeds. Just verified using test.pypi.org
T 1600088840 18<ThiefMaster18>	when switching from setup.py+reqirements.txt to setup.cfg, is there any way to install just the requirements without the package itself? previously i could `pip install -r requirements.txt`, but if i do `pip install -e .` i also install my package of course
T 1600088869 18<ThiefMaster18>	my usecase is CI: i'd like to use the github/travis CI cache to cache the requirements, but not my package itself
T 1600088973 18<ThiefMaster18>	https://github.com/pypa/setuptools/issues/1951 would be nice.. then i could just keep requirements.txt and use `install_requires = file: requirements.txt` in setup.cfg
T 1600090992 18<tos918>	McSinyx[m]: (+1)
T 1600091009 18<tos918>	ThiefMaster: setup.cfg doesn't replace requirements.txt
T 1600091021 18<tos918>	ThiefMaster: it's purely equivalent to setup.py (well, 98% equivalent)
T 1600091072 18<ThiefMaster18>	but what's the point in defining requirements in two places for an end user application (not library) where you only want pinned deps anyway?
T 1600091115 18<McSinyx[m]18>	please elaborate on the two places part
T 1600091119 18<tos918>	you don't need to, then don't put them in setup.cfg.
T 1600091158 18<tos918>	ThiefMaster: Note your comment very well supports toad_polo's :) -- that ticket was not suggesting putting requirements.txt in there, nedbat was talking about requirements.in which is a pip-compile file
T 1600091218 18<toad_polo18>	It is a problem that there's no way to install all the requirements for a project except the project.
T 1600091226 18<McSinyx[m]18>	ThiefMaster. as mentioned in the linked issue, setup.py is for weird hacks
T 1600091270 18<McSinyx[m]18>	e.g. keeping req.txt and use something to parse it in setup.py (note that pip install -r also read options from file)
T 1600091326 18<ThiefMaster18>	which means i can't have fully-declarative dependencies (setup.cfg) ;)
T 1600091362 18<toad_polo18>	ThiefMaster: No, you can and should put your dependencies in `setup.cfg`.
T 1600091511 18<toad_polo18>	ThiefMaster: Depending on what you are trying to achieve, probably what you should do is move your dependencies into `setup.cfg` and use `pip-compile` (no arguments) to generate a `requirements.txt`.
T 1600091552 18<toad_polo18>	You can do that as part of your CI, and then `pip install -r requirements.txt` to install all your dependencies without installing the package itself.
T 1600091580 18<ThiefMaster18>	that sounds good :)
T 1600091581 18<toad_polo18>	AFAICT it won't work if you need to install extras or something like that.
T 1600091650 18<ThiefMaster18>	hrm i do need the [dev] extras for CI..
T 1600091919 18<McSinyx[m]18>	just curious (probably I won't come up with anything better than what toad_polo suggested), is it possible for me to view your dependency definitions ThiefMaster?
T 1600091977 18<ThiefMaster18>	McSinyx[m]: https://github.com/indico/newdle/pull/228/files#diff-380c6a8ebbbce17d55d50ef17d3cf906
T 1600092043 18<McSinyx[m]18>	I think you can move [dev] to tox
T 1600092102 18<McSinyx[m]18>	and cache .tox if the test invokation isn't too complicated
T 1600092103 18<ThiefMaster18>	developers also need this stuff
T 1600092141 18<McSinyx[m]18>	if it's declared in tox.ini then running tox would create a venv with those anyway
T 1600092281 18<McSinyx[m]18>	I've just taken a peek at the Makefile: I think it's possible to convert to tox without too much effort
T 1600092539 18<McSinyx[m]18>	*invocation, I'm not German FYI
T 1600092647 18<ThiefMaster18>	isn't tox meant to run tests?
T 1600092654 18<ThiefMaster18>	i never heard about it being used to setup a dev environment
T 1600092821 18<ThiefMaster18>	> and use `pip-compile` (no arguments) to generate a `requirements.txt`
T 1600092823 18<ThiefMaster18>	that looks great
T 1600092829 18<ThiefMaster18>	but not being able to enable extras sucks :/
T 1600093100 18<toad_polo18>	ThiefMaster: I suspect that it would be a good idea to search or / make an issue / PR enabling support for `pip-compile <directory>` and `pip-compile <directory>[extras]`.
T 1600093141 18<toad_polo18>	I do think that `tox` is probably better though. It's designed for this kind of thing.
T 1600093180 18<toad_polo18>	Plus I also think you should install your package when you are testing it (and in fact you should probably only test your package if it's installed): https://blog.ganssle.io/articles/2019/08/test-as-installed.html
T 1600093227 18<ThiefMaster18>	of course, and i do that - this is only about being able to cache the deps for CI
T 1600093252 18<toad_polo18>	How about `pip wheel .[dev]`?
T 1600093296 18<toad_polo18>	`pip wheel .[dev] -w <cache_dir>`, then you can configure `pip` with an environment variable to first search `<cache_dir>` before hitting PyPI.
T 1600093327 18<toad_polo18>	That will mean that you'll get a fixed version, mind you ‚Äî it's not a caching index like devpi.
T 1600093766 18<graingert18>	ThiefMaster: I use dephell
T 1600093772 18<graingert18>	ThiefMaster: https://github.com/PyCQA/modernize/pull/228/checks?check_run_id=1112643738#step:6:1
T 1600093808 18<graingert18>	ThiefMaster: you probably want to steal my config from that repo
T 1600093887 18<graingert18>	and you can make a tox, "dev" env
T 1600105669 18<ThiefMaster18>	is this a bug? i published indico==2.3 to pypi a while ago (30m or so), but `pip install --use-feature=2020-resolver -U indico` does not upgrade it. the currently-installed version is from a local wheel, `indico @ file:///opt/indico/wheels/indico-2.3.dev0%2B202009141513.3dbbddef32-py2-none-any.whl` according to `pip freeze`
T 1600105700 18<ThiefMaster18>	pip just shows `Requirement already satisfied: indico in ./.venv/lib/python2.7/site-packages (2.3.dev0+202009141513.3dbbddef32)` for it
T 1600105721 18<ThiefMaster18>	if i disable the resolver, it works fine
T 1600112422 18<dunk18>	Is it possible somehow to query a pip package for the actual python-level packages that it provides (e.g. PyYAML --> yaml)
T 1600117327 18<sumanah18>	reminder https://pip.pypa.io/en/latest/user_guide/#changes-to-the-pip-dependency-resolver-in-20-2-2020 that now's a good time to try out the beta of the new dependency resolver so you're forewarned and your environment doesn't break next month
T 1600122318 18<FFY0018>	wouldn't it be a good idea to have pip actively prompting users to use the new resolver? I think these kind of announcements can be easily missed
T 1600122400 18<FFY0018>	"Next release will use the new dependency resolver, try it beforehand with --use-feature=2020-resolver and let us know if you have any issues!"
T 1600122469 18<FFY0018>	will there be at least a flag to use the old resolver if things break?
T 1600124458 18<graingert18>	dunk: pipreqs seems the only way
T 1600124473 18<graingert18>	and if there's a whl
T 1600124483 18<graingert18>	Where there's a whl there's a way
T 1600125717 18<toad_polo18>	FFY00: I think there will be at least one release with a flag to opt out of the new resolver.
T 1600132480 18<FFY0018>	great :)
T 1600132915 18<PSFSlack18>	<di> Relevant discussion here: https://github.com/pypa/pip/issues/8076#issuecomment-685790030
T 1600160754 18<pradyunsg18>	https://pip.pypa.io/en/stable/user_guide/#deprecation-timeline - how we're doing the resolver rollout is mentioned in the documentation.
T 1600168080 18<ThiefMaster18>	is this a bug? i published indico==2.3 to pypi a while ago (30m or so), but `pip install --use-feature=2020-resolver -U indico` does not upgrade it. the currently-installed version is from a local wheel, `indico @ file:///opt/indico/wheels/indico-2.3.dev0%2B202009141513.3dbbddef32-py2-none-any.whl` according to `pip freeze`
T 1600168080 18<ThiefMaster18>	pip just shows `Requirement already satisfied: indico in ./.venv/lib/python2.7/site-packages (2.3.dev0+202009141513.3dbbddef32)` for it
T 1600168080 18<ThiefMaster18>	if i disable the resolver, it works fine
T 1600168100 18<ThiefMaster18>	actually, "30m or so" is outdated, it was yesterday evening, but i didn't get any replies back then ;)
T 1600196036 18<daniel13718>	hi
T 1600196040 18<daniel13718>	there is someone here?
T 1600196066 18<daniel13718>	need help to install one package on python
T 1600196070 18<daniel13718>	i have roblems
T 1600196074 18<daniel13718>	problems
T 1600196121 18<daniel13718>	ayuda!!!
T 1600196824 18<nedbat18>	daniel137: #python will be betteer
T 1600196828 18<nedbat18>	better
T 1600253874 18<graingert18>	pradyunsg: > Once the feature becomes the default behaviour, this flag can remain in place, but should issue a warning telling the user that it is no longer necessary.
T 1600253874 18<graingert18>	so the flag will remain forever?
T 1600253908 18<graingert18>	pradyunsg: if the feature flags are namespaced by year then leaving them as warn-noops seems safe forever
T 1600254089 18<pradyunsg18>	graingert: Where's that quote from?
T 1600254124 18<graingert18>	pradyunsg: https://pip.pypa.io/en/stable/development/release-process/#use-feature
T 1600254145 18<graingert18>	pradyunsg: linked from your link yesterday
T 1600254226 18<graingert18>	looking foward to --legacy-feature=slow-deps
T 1600254312 18<graingert18>	pradyunsg: the "can remain in place" is a bit scary. Like will it or won't it?
T 1600456113 18<dunk18>	Hi. I've got an issue and I am not sure if it's a problem with the dependency resolver or just my conception of what I should do. I've got a main.in, test.in, and dev.in. I am trying to generate test.txt using test.in and the output of `pip-compile` run against main.in.
T 1600456178 18<dunk18>	The problem is that the output of main.in (I've used main.txt) has pinnings for package dependencies, and the second step is treating those as fixed.
T 1600456399 18<dunk18>	What I mean is that, while it would make sense for the downstream steps to fix versions completely on things I specified in the main.in, it doesn't make sense that it fixes versions of dependencies in the same way, when some package downstream needs a higher version?
T 1600456446 18<dunk18>	I seem to have to do a manual package upgrade, but shouldn't pip-compile be able to know that this isn't a fixed package version specified upstream - only a dependency - and so it could suggest / do the upgrade automatically?
T 1600456858 18<tos918>	dunk: I can't parse the question, can you give an example
T 1600456876 18<tos918>	The point of pip-compile is to pin versions of all dependencies, including transitive ones, and yeah you should do that (if of course you should have a requirements.txt in the first place)
T 1600456882 18<dunk18>	tos9: sorry, yeah, it's not quite clear is it
T 1600456952 18<tos918>	no worries yeah maybe rephrasing or an example
T 1600456958 18<dunk18>	tos9: ok, so, I have flask and pip-tools both needing Click, and that's in main.in. test.in has black in it, and it's barfing because it requires Click 7.1.2, but Click 7.0 was previously pinned in main.txt.
T 1600456988 18<dunk18>	(black is what requires Click 7.1.2)
T 1600456994 18<dunk18>	The new version, anyway
T 1600457005 18<tos918>	fun, it literally pins that version from below?
T 1600457031 18<tos918>	yup it does
T 1600457047 18<tos918>	so probably you can do `-r *main.in*` rather than `main.txt`?
T 1600457055 18<tos918>	And let pip-compile get you versions that are compatible with your testing deps too
T 1600457994 18<dunk18>	tos9: ah, so that works?
T 1600458052 18<dunk18>	tos9: two things: (1) do you mean to put that at the top of the test.in or on the `pip-compile` command line? and (2) why the wildcards around main.in?
T 1600458084 18<tos918>	dunk: test.in, and sorry I was just emphasizing
T 1600458106 18<dunk18>	gotya
T 1600458128 18<tos918>	it should work yes, neither pip nor pip-compile treat any file extension specially, it's just a file, so you can use it with `-r` same as any other
T 1600458142 18<tos918>	(I have definitely done what you're doing before, but it's yeah trial and error)
T 1600458442 18<dunk18>	tos9: That works (yay), though a small part of me wonders whether this is actually safe. I can (and do!) now have different versions of dependencies in my output main.txt and test.txt files...
T 1600458466 18<tos918>	right
T 1600458479 18<tos918>	(sorry, 25 years later we're still all paying for Python's bad import system :/)
T 1600458499 18<tos918>	it's certainly possible something goes wrong there
T 1600458502 18<dunk18>	üò®
T 1600458539 18<tos918>	in theory the way this should work is you constrain your production deps *forward* onto the versions required by the testing deps and then you're all good, your testing deps will be a compatible superset of your prod ones
T 1600458542 18<dunk18>	I can hand-hack the target file, and it'll work, but it's a bit of a crap experience for the next developer who won't know
T 1600458559 18<tos918>	in practice that's not possible in general, since a testing dep may depend on an incompatible version
T 1600458571 18<dunk18>	Hmm, yeah
T 1600458575 18<tos918>	or well S/{in theory, in practice}/{in practice, in theory}/
T 1600458617 18<dunk18>	I don't suppose the new pip resolver helps here does it?
T 1600458624 18<tos918>	Not in a way I can think of.
T 1600458642 18<tos918>	Let me see if I can find what I did the last time I solved this.
T 1600458690 18<dunk18>	thanks :-)
T 1600458731 18<tos918>	to be honest I think your best practical option I can think of may be a constraints file, even though you'll have some manual step for now but it'll be an explicit one
T 1600458744 18<tos918>	by which I mean, go back to having your test-requirements.txt file do -r requirements.txt
T 1600458758 18<tos918>	then add a constraints.txt file, add -c constraints.txt to your requirements.*in* file
T 1600458768 18<tos918>	then in that constraints file, add constraints to get the test-requirements.txt file to compile
T 1600458776 18<tos918>	(so add click>=7.1.2 to it)
T 1600458819 18<tos918>	then your prod versions will compile to the test-requirements.txt ones, and you have a mechanism to signal to your prod requirements that there's particular versions you want to use since they'll be the ones your tests run under
T 1600458832 18<tos918>	the only fun may be that pip-tools has some funny bugs around constraints IIRC (heck, so does pip)
T 1600458880 18<dunk18>	Oh, perfect
T 1600458905 18<dunk18>	I don't really mind if it's manual. The most important thing is that it's explicit
T 1600458948 18<tos918>	right
T 1600458953 18<tos918>	maybe give that a shot
T 1600465223 18<dunk18>	tos9: I went with force-upgrading click in the previous step (main.[in|txt])
T 1600465317 18<dunk18>	pip-compile is of course eating its own output, and so it's the previous invocation (some time in the distant past) that's to blame. I was a bit confused as it's not an explicitly named package, so I thought that it would be auto-managed, but as you outlined it's not really possible.
T 1600465340 18<dunk18>	I didn't realise that you can just force-update the dependencies as well as the main named packages
T 1600465354 18<dunk18>	But thanks, I was struggling there and you made it a lot clearer!
T 1600473691 18<tos918>	np
T 1609963182 19*	Now talking on 22#pypa
T 1609963182 22*	Topic for 22#pypa is: The channel for users of PyPA tools (pip, virtualenv, setuptools, etc) | Packaging User Guide: https://packaging.python.org | pypi.org status https://status.python.org/ | New pip launched 2020-11-30 https://blog.python.org/2020/11/pip-20-3-release-new-resolver.html | Development discussion happens in #pypa-dev | Use !logs for a link to channel logs. /msg pmxbot !help for commands
T 1609963182 22*	Topic for 22#pypa set by 26sumanah (24Mon Nov 30 09:43:03 2020)
T 1609966075 18<w00z1t18>	having a pip issue where two packages share another package.  all three i maintain.
T 1609966097 18<w00z1t18>	pip complains that the versions are in conflict
T 1609966196 18<w00z1t18>	using the setup.cfg install_requires directive and referencing a git repo
T 1609966229 18<w00z1t18>	pip 20.3.3 from /var/www/wagblog/venv/lib/python3.8/site-packages/pip (python 3.8)
